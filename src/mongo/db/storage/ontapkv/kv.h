#ifndef _KV_H_
#define _KV_H_

#include <uuid/uuid.h>
#include <stdint.h>

/*
 * This is for libkv. Here just for reference
 */ 
typedef struct libkv_context_s {
	uint32_t libkv_cksum; /* Checksum on the data */
	uint32_t libkv_txid;  /* Transaction id when the key last got updated */
} libkv_context_t;

typedef struct kv_loc_s {
	uint64_t kvl_pvbn; /* For now it is just the pvbn */
} kv_loc_t;

/*
 * Copied from wafl context
 */ 
typedef struct kv_storage_context_s {
	uint64_t kvsc_fbn;
	uint32_t kvsc_buftreeid;
	uint32_t kvsc_cpcount;
} kv_storage_context_t;

/*
 * Storage metadata for fastpath reads
 */
typedef struct kv_storage_hint_s {
	kv_loc_t kvsh_loc;
	kv_storage_context_t kvsh_cxt;
} kv_storage_hint_t;

typedef uint32_t kv_txn_id;

/*
 * Key format:
 * Document keys: {container_id}_{doc_id}
 *		 where doc_id is generated by storage
 * Index keys: {container_id}_{index_id}_{key}
 *		where index_id uniquifies the key
 * Key will encode the container_id if there is one-to-many mapping between
 * vvol to containers
 */ 

/*
 * Returns 0 on success, non-zero error code on failure
 */
int
kv_get(uuid_t storage_uuid, /* Vvol uuid */
       uint8_t *key,
       int keylen,
       void *data,
       int *datalen,
       kv_storage_hint_t *hint, /* Hint for storage fastpath */
       kv_storage_hint_t *outhint); /* Updated hint if it changed */

int 
kv_put(uuid_t storage_uuid, /* Vvol uuid */
       uint8_t *key,
       int keylen,
       void *data,
       int *datalen,
       kv_txn_id txn_id,
       kv_storage_hint_t *outhint); /* Return hint for storage fastpath */

int
kv_delete(uuid_t storage_uuid, /* Vvol uuid */
	  uint8_t *key,
	  int keylen,
	  kv_txn_id txn_id);
#endif
